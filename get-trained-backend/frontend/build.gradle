sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile project(":backend-batch")

    compile libs.spring_boot_websocket

    compile libs.liquibase

    testCompile libs.test
    testCompile libs.test_secure
}

jar {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    ext.revision = proc.text.trim()

    manifest {
        attributes(
                "Implementation-Version": version + " build: " + ext.revision,
                "releases-date": new Date().format("yyyy-MM-dd'T 'HH:mm:ss.SSSZZ"),
                "Specification-Vendor": "GetTrained",
                "Specification-Title": "GetTrained-Frontend-Main"
        )
    }

    baseName 'get-trained-frontend'
}

compileIntegrationTestJava {
    options.encoding = "UTF-8"
}

def integrationTestConfig = {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }

    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: " +
                        "${result.resultType} (${result.testCount} tests, " +
                        "${result.successfulTestCount} successes, ${result.failedTestCount} failures, " +
                        "${result.skippedTestCount} skipped)"
            }
        }
    }
}

task iTestWithPostgres(type: Test) {
    configure integrationTestConfig
    systemProperty "spring.config.location", "../config/integration-tests/application-integration-test-postgresql.properties"
}

